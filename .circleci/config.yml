version: 2
 
jobs:
    build:
        context: AWS
        working_directory: ~/circleci-python
        docker:
            - image: circleci/python:3.6.4
        steps:
            - checkout
            # - run:
                # name: Set AWS region
                # command: aws configure set region ap-northeast-1d
            - run: echo {$AWS_ACCESS_KEY_ID}
            - run: echo {$AWS_SECRET_ACCESS_KEY}
            - run: echo "${AWS_SECRET_ACCESS_KEY}"
            - run: echo "${AWS_SECRET_ACCESS_KEY}"
            - run: echo $AWS_ACCESS_KEY_ID
            - run: echo $AWS_SECRET_ACCESS_KEY
            - run: export AWS_ACCESS_KEY_ID11={$AWS_ACCESS_KEY_ID}
            - run: export AWS_ACCESS_KEY_ID12={$AWS_SECRET_ACCESS_KEY}
            - run: export AWS_ACCESS_KEY_ID13="${AWS_SECRET_ACCESS_KEY}"
            - run: export AWS_ACCESS_KEY_ID14="${AWS_SECRET_ACCESS_KEY}"
            - run: export AWS_ACCESS_KEY_ID15=$AWS_ACCESS_KEY_ID
            - run: export AWS_ACCESS_KEY_ID16=$AWS_SECRET_ACCESS_KEY
            - run: printenv
            - run:
                name: build
                command: pwd
                # command: pwd && git config --global user.name "katakatana" && git config --global user.email "tbol42356@gmail.com"
                # command: aws deploy create-deployment --application-name appA-name --deployment-group-name appA-deploy-group --github-location repository="your/repository",commitId="$CIRCLE_SHA1"
    # EC2 に SSH 接続・デプロイを実行
    deploy:
        context: AWS
        working_directory: ~/circleci-python
        docker:
            - image: circleci/python:3.6.4
            # image: circleci/classic:edge
        steps:
            - checkout
            # CircleCI に登録した秘密鍵を呼び出す
            # - add_ssh_keys:
            # CircleCI に登録した環境変数を使って SSH
            # - run: ssh ${USER_NAME}@${HOST_NAME}
            - run: python3 -m venv dnsenv
            - run: source dnsenv/bin/activate
            - run: pwd
            - run: who
            - run: sudo pip install --upgrade pip
            - run: sudo pip3 install octodns
            - run: sudo pip3 install boto3
            - run:
                name: AWS_ACCESS_KEY_ID
                command: |
                  export AWS_ACCESS_KEY_ID1=$AWS_ACCESS_KEY_ID
                  export AWS_ACCESS_KEY_ID2=AWS_ACCESS_KEY_ID
                  export AWS_ACCESS_KEY_ID3=$AWS_ACCESS_KEY_IDΩ
            - run: echo AWS_SECRET_ACCESS_KEY1={$AWS_SECRET_ACCESS_KEY}
            - run: echo AWS_SECRET_ACCESS_KEY2=${AWS_SECRET_ACCESS_KEY}
            - run: echo AWS_SECRET_ACCESS_KEY3="${AWS_SECRET_ACCESS_KEY}"
            - run: echo AWS_SECRET_ACCESS_KEY4='${AWS_SECRET_ACCESS_KEY}'
            - run: echo AWS_SECRET_ACCESS_KEY5='$AWS_SECRET_ACCESS_KEY'
            - run: echo AWS_SECRET_ACCESS_KEY6=$'AWS_SECRET_ACCESS_KEY'
            - run: echo AWS_SECRET_ACCESS_KEY7='{$AWS_SECRET_ACCESS_KEY}'
            - run: echo AWS_ACCESS_KEY_ID
            - run: echo AWS_SECRET_ACCESS_KEY
            - run: export AWS_SECRET_ACCESS_KEY1={$AWS_SECRET_ACCESS_KEY}
            - run: export AWS_SECRET_ACCESS_KEY2=${AWS_SECRET_ACCESS_KEY}
            - run: export AWS_SECRET_ACCESS_KEY3="${AWS_SECRET_ACCESS_KEY}"
            - run: export AWS_SECRET_ACCESS_KEY4='${AWS_SECRET_ACCESS_KEY}'
            - run: export AWS_SECRET_ACCESS_KEY5='$AWS_SECRET_ACCESS_KEY'
            - run: export AWS_SECRET_ACCESS_KEY6=$'AWS_SECRET_ACCESS_KEY'
            - run: export AWS_SECRET_ACCESS_KEY7='{$AWS_SECRET_ACCESS_KEY}'
            # - run: export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            # - run: export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - run: printenv
            # - run: git --version && printenv
            # - run: git colne https://github.com/katakakana/dns.git
            - run: octodns-validate --config-file ./octoDNS/production.yaml
            - run: octodns-sync --config-file=./octoDNS/production.yaml
            - run: octodns-sync --config-file=./octoDNS/production.yaml --doit

workflows:
    version: 2
    build_and_deploy:
        jobs:
            - build:
              context: AWS
            - deploy:
                requires:
                    # build ジョブに依存してるので、先に build ジョブを実行しろ！
                    - build
                # master ブランチに push された場合のみ deploy
                filters:
                    branches:
                        only: master
